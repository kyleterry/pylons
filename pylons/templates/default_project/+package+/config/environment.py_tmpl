"""Pylons environment configuration"""
import os

{{if template_engine == 'mako'}}
from mako.lookup import TemplateLookup
{{elif template_engine == 'genshi'}}
from genshi.template import TemplateLoader
{{endif}}
from pylons import config
{{if sqlalchemy}}
from sqlalchemy import engine_from_config
{{endif}}

import {{package}}.lib.app_globals as app_globals
import {{package}}.lib.helpers
from {{package}}.config.routing import make_map
{{if sqlalchemy}}
from {{package}}.model import init_model
{{endif}}

def load_environment(global_conf, app_conf):
    """Configure the Pylons environment via the ``pylons.config``
    object
    """
    # Pylons paths
    root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    paths = dict(root=root,
                 controllers=os.path.join(root, 'controllers'),
                 static_files=os.path.join(root, 'public'),
                 templates=[os.path.join(root, 'templates')])

    # Initialize config with the basic options
    config.init_app(global_conf, app_conf, package='{{package}}', paths=paths)

    config['routes.map'] = make_map()
    config['pylons.g'] = app_globals.Globals()
    config['pylons.h'] = {{package}}.lib.helpers
    {{if sqlalchemy}}
    
    # Setup SQLAlchemy database engine
    engine = engine_from_config(config, 'sqlalchemy.')
    init_model(engine)
    {{endif}}
    
    {{if template_engine == 'mako'}}
    # Create the Mako TemplateLookup
    config['pylons.g'].mako_lookup = TemplateLookup(
        directories=paths['templates'], input_encoding='utf-8', 
        output_encoding='utf-8', module_directory=os.path.join(
            app_conf['cache_dir'], 'templates'),
    )
    {{elif template_engine == 'genshi'}}
    # Create the Genshi TemplateLoader
    config['pylons.g'].genshi_loader = TemplateLoader(paths['templates'])
    {{endif}}
    
    # CONFIGURATION OPTIONS HERE (note: all config options will override
    # any Pylons config options)
