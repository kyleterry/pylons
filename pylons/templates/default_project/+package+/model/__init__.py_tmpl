{{if sqlalchemy}}
import sqlalchemy as sa
from sqlalchemy import orm

from {{package}}.model import meta

def init_model(engine):
    """Call me before using any of the tables or classes in the model."""

    # Reflected tables must be defined and mapped here.
    #
    #global t_reflected
    #t_reflected = sa.Table("Reflected", meta.metadata,
    #    autoload=True, autoload_with=engine)
    #orm.mapper(Reflected, t_reflected)

    sm = orm.sessionmaker(autoflush=True, transactional=True, bind=engine)

    meta.engine = engine
    meta.Session = orm.scoped_session(sm)


# Classes for reflected tables may be defined here, but the table and
# mapping itself must be done in the init_model function.
#
#table_reflected = None    # Updated by init_model().
#
#class Reflected(object):
#    pass
{{endif}}
